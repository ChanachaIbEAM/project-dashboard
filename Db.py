import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, dash_table

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
file_path = '22-134Socket.xlsx'
df = pd.read_excel(file_path)

# ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
df.columns = df.columns.str.strip()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Privote' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DataFrame ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if 'Privote' not in df.columns:
    raise KeyError("The column 'Privote' does not exist in the DataFrame. Please check the column name.")

# ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å
columns_to_exclude = ['Baseline Start', 'Baseline Finish', 'Variance']
df = df[[col for col in df.columns if col not in columns_to_exclude]]

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime object ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
df['Start Date'] = pd.to_datetime(df['Start Date'], errors='coerce')
df['End Date'] = pd.to_datetime(df['End Date'], errors='coerce')

# ‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô dd/mm/yyyy
df['Start Date'] = df['Start Date'].dt.strftime('%d/%m/%Y')
df['End Date'] = df['End Date'].dt.strftime('%d/%m/%Y')

# ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
project_name = "22-134 Change Maker of Socket from Fukui to Unipro"
start_date = "2024-12-16"
end_date = "2025-06-01"

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
status_counts = df['Status'].value_counts().reset_index()
status_counts.columns = ['Status', 'Count']

if not status_counts.empty:
    total_tasks = status_counts['Count'].sum()
    completed_tasks = status_counts.loc[status_counts['Status'] == 'Complete', 'Count'].sum() if 'Complete' in status_counts['Status'].values else 0
    percent_complete = (completed_tasks / total_tasks) * 100 if total_tasks > 0 else 0
else:
    total_tasks = 0
    completed_tasks = 0
    percent_complete = 0

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
color_map = {
    "Complete": "#A5D6A7",  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
    "In Progress": "#FFF59D",  # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
    "Not Started": "#FFABAB"  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
}

# ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° (Donut Chart) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö % Complete
fig_complete = px.pie(status_counts, values='Count', names='Status', hole=0.4,
                      color_discrete_map=color_map)
fig_complete.update_traces(
    textinfo='percent+label',
    insidetextfont=dict(color='white'),
    texttemplate='%{label}: %{percent:.1%}'
)

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ 'o' ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Privote ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gantt Chart
filtered_df = df[df['Privote'] == 'o']

# Gantt Chart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Timeline (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
fig_gantt = px.timeline(filtered_df, x_start='Start Date', x_end='End Date', y='Topic', color='Status',
                        color_discrete_map=color_map,
                        title='Project Timeline')
fig_gantt.update_yaxes(autorange="reversed")  # ‡πÅ‡∏™‡∏î‡∏á Task ‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
fig_status = px.bar(status_counts, x='Status', y='Count', color='Status',
                    color_discrete_map=color_map)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Dash
app = Dash(__name__)

app.layout = html.Div(style={
    'font-family': 'Arial, sans-serif',
    'backgroundColor': '#f9f9f9',
    'padding': '20px'
}, children=[
    # ‡∏ä‡∏∑‡πà‡∏≠ Project Dashboard ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
    html.Div([
        html.H1('Project Dashboard', style={
            'textAlign': 'center',
            'color': '#333',
            'font-size': '2rem',
            'margin-bottom': '10px'
        }),
        html.P('Welcome to my project.', style={
            'textAlign': 'center',
            'color': '#666',
            'font-size': '1rem',
            'margin-bottom': '20px'
        })
    ]),

    # ‡∏™‡πà‡∏ß‡∏ô Project Details ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
# ‡∏™‡πà‡∏ß‡∏ô Project Details ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
html.Div([
    # ‡πÉ‡∏ä‡πâ Flexbox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    html.Div([
        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Project Details
        html.Div([
            html.H3('üîç Project Details', style={'color': '#444', 'font-weight': 'bold'}),
            html.P(f'üìÅ Project Name: {project_name}', style={'margin': '5px 0'}),
            html.P(f'üìÖ Start Date: {start_date}', style={'margin': '5px 0'}),
            html.P(f'üìÖ End Date: {end_date}', style={'margin': '5px 0'}),
            html.P(f'üìä Progress: {round(percent_complete, 2)}%', style={
                'margin': '5px 0',
                'font-size': '1.2rem',
                'font-weight': 'bold',
                'color': '#007BFF'
            })
        ], style={
            'flex': 1,  # ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà
        }),

        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        html.Div([
            html.Img(src='/assets/socket.png', style={
                'width': '200px',  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                'height': 'auto',  # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
                'border-radius': '8px',  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                'box-shadow': '0px 4px 10px rgba(0, 0, 0, 0.1)'  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            })
        ], style={
            'flex-shrink': 0,  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á
            'display': "flex",
            "align-items": "center",  # ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
            "justify-content": "left",  # ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
            "height": "100%",  # ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏£‡∏≠‡∏ö
        }),
    ], style={
        "display": "flex",           # ‡πÉ‡∏ä‡πâ Flexbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        "align-items": "center",     # ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    }),
], style={
    'backgroundColor': '#fff',
    'border-radius': '12px',
    'padding': '15px',
    'box-shadow': '0px 4px 10px rgba(0, 0, 0, 0.1)',  
    "margin-bottom": "20px"      
}),

    # ‡∏™‡πà‡∏ß‡∏ô Donut Chart ‡πÅ‡∏•‡∏∞ Bar Chart ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    html.Div([
        html.Div([
            dcc.Graph(figure=fig_complete)
        ], style={
            'width': '48%',
        }),

        html.Div([
            dcc.Graph(figure=fig_status)
        ], style={
            'width': '48%',
        }),
    ], style={'display': 'flex'}),

    # ‡∏™‡πà‡∏ß‡∏ô Gantt Chart ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    html.Div([
        dcc.Graph(figure=fig_gantt)
    ]),

    # Task Summary Table ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö (Card)
    html.Div([
        html.H3('üìã Task Summary Report', style={'color': '#555'}),
        
        dash_table.DataTable(
            data=df.to_dict('records'),
            columns=[{'name': col, 
                      'id': col} for col in df.columns],
            style_table={
                "overflowX": "auto",  
                "border-radius": "8px",
                },
            style_cell={
                "textAlign": "center",
                "padding": "8px",
                "font-size": "1rem"
            },
            style_header={
                "backgroundColor": "#f4f4f4",
                "fontWeight": "bold",
                "color": "#333"
            },
            style_data_conditional=[
                {
                    "if": {"row_index": "odd"},
                    "backgroundColor": "#f9f9f9",
                },
                {
                    # ‡πÄ‡∏ó‡∏™‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Complete
                    "if": {"column_id": "Status", "filter_query": '{Status} = "Complete"'},
                    "backgroundColor": "#A5D6A7",
                    "color": "#333",
                },
                {
                    # ‡πÄ‡∏ó‡∏™‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö In Progress
                    "if": {"column_id": "Status", "filter_query": '{Status} = "In Progress"'},
                    "backgroundColor": "#FFF59D",
                    "color": "#333",
                },
                {
                    # ‡πÄ‡∏ó‡∏™‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Not Started
                    "if": {"column_id": "Status", "filter_query": '{Status} = "Not Started"'},
                    "backgroundColor": "#FFABAB",
                    "color": "#333",
                },
            ],
        ),
    ], style={'margin-top':'20px'})
])

if __name__ == '__main__':
    app.run_server(host='0.0.0.0', port=8050, debug=True)
